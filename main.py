# Импортируем необходимые модули
import json  # Для работы с JSON-файлами
import os    # Для работы с операционной системой (проверка существования файла)

# Глобальные переменные
todo_list = []  # Основной список для хранения дел
SAVE_FILE = "Save_List.json"  # Имя файла для сохранения данных


def initialize_save_file():
    """
    Инициализирует файл сохранения.
    Создает новый файл с пустым списком, если файл не существует.
    """
    if not os.path.exists(SAVE_FILE):  # Проверяем существование файла
        with open(SAVE_FILE, 'w', encoding='utf-8') as f:  # Открываем файл для записи
            json.dump([], f)  # Записываем в файл пустой список


def load_tasks():
    """
    Загружает задачи из JSON-файла в глобальную переменную todo_list.
    Если возникает ошибка, начинает с пустого списка.
    """
    global todo_list  # Объявляем, что будем работать с глобальной переменной
    try:
        with open(SAVE_FILE, 'r', encoding='utf-8') as f:  # Открываем файл для чтения
            todo_list = json.load(f)  # Загружаем данные из файла
    except (json.JSONDecodeError, IOError) as e:  # Ловим возможные ошибки
        todo_list = []  # Если ошибка, используем пустой список
        print('Ошибка при загрузке данных')


def save_tasks():
    """
    Сохраняет текущий список задач в JSON-файл.
    """
    try:
        with open(SAVE_FILE, 'w', encoding='utf-8') as f:  # Открываем файл для записи
            # Записываем список с отступами (для читаемости) и поддержкой кириллицы
            json.dump(todo_list, f, ensure_ascii=False, indent=4)
    except IOError as e:  # Ловим ошибку ввода-вывода
        print('Ошибка при сохранении') # Сообщаем пользователю что возникла ошибка


def start_menu():
    """
    Выводит в консоль меню с доступными командами.
    """

    print('Доступные команды: ')
    print('1 - для показа всего списка дел')
    print('2 - для удаления дела из списка')
    print('3 - для показа всех команд')
    print('exit - для остановки программы')
    print('Для добавления дела в список просто напиши его в консоль')
    print()  # Пустая строка для красоты


def show_task():
    """
    Показывает все текущие дела в списке.
    Если список пуст, выводит соответствующее сообщение.
    """
    if not todo_list:  # Проверка на пустоту списка
        print('Список пуст!')
    else:
        print('Ваш список дел: ')
        # Перебираем все дела с нумерацией, начиная с 1
        for i, task in enumerate(todo_list, 1):
            print(f'Дело {i}: {task}')  # Выводим номер и текст дела


def remove_task():
    """
    Удаляет дело из списка по указанному номеру.
    Перед удалением показывает текущий список дел.
    """
    if not todo_list:  # Если список пуст
        print('Список пуст! Удаление невозможно!')
    else:
        # Показываем все дела с номерами
        for i, task in enumerate(todo_list, 1):
            print(f'Дело {i}: {task}')

    if todo_list:  # Если в списке есть дела
        try:
            # Запрашиваем номер дела для удаления (преобразуем в int и уменьшаем на 1)
            del_task = int(input('Введите номер дела для удаления: ')) - 1

            if 0 <= del_task < len(todo_list):  # Проверяем, что номер в допустимых пределах
                removed_task = todo_list.pop(del_task)  # Удаляем дело и сохраняем его
                print(f'Дело "{removed_task}" успешно удалено!')
                save_tasks()  # Сохраняем изменения в файл
        except ValueError:  # Если введено не число
            print('Необходимо ввести число!')


# Основная логика программы

# Инициализация файла сохранения
initialize_save_file()
# Загрузка задач из файла
load_tasks()
# Показ меню
start_menu()


# Основной цикл программы
while True:
    try:
        # Получаем ввод пользователя
        user_input = input('Введите новое дело или комманду: ')

        if user_input == 'exit':  # Команда выхода
            save_tasks()  # Сохраняем перед выходом
            print('Пока :(')
            break  # Выходим из цикла

        elif user_input == '1':  # Команда показа списка
            show_task()

        elif user_input == '2':  # Команда удаления
            remove_task()

        elif user_input == '3':  # Команда показа меню
            start_menu()

        else:  # Любой другой ввод
            if user_input:  # Если ввод не пустой
                todo_list.append(user_input)  # Добавляем как новое дело
                print(f'Дело: "{user_input}" добавлено!')
                save_tasks()  # Сохраняем изменения
            else:  # Если ввод пустой
                print('ERROR! Невозможно добавить пустое дело!')

    except KeyboardInterrupt:
        break